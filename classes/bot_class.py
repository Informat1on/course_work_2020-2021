# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
import requests
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
from bs4 import BeautifulSoup
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä –º–æ–¥–æ–º
from selenium import webdriver
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å api Telegram
import telegram
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ª–æ–≥–æ–≤
import logging
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
from telegram import ReplyKeyboardRemove, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, callbackqueryhandler)
import time
from modules import bookvoed as bk, chitaina as cht, combook as cmbk, fitabooks as fitb, fkniga as fkng, labirint as lbrn, polka23 as pl23, mir_shkolnika as mrshk


class FindBookBot:
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, bot_token):
        self.bot = telegram.Bot(token=bot_token)  # —Å–æ–∑–¥–∞—é –±–æ—Ç–∞
        self.updater = Updater(token=bot_token)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–ø–¥–µ–π—Ç–µ—Ä
        self.dispatcher = self.updater.dispatcher  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–ø–∞—Ç—á–µ—Ä
        # –æ–±—å—è–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.BUTTON_BEGIN, self.BOOK_NAME, self.SEARCH, self.END = range(4)

        # –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                            level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    # —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    def start(self):
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                            level=logging.INFO)
        print(self.bot.get_me())  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.begin)],

            states={
                self.BUTTON_BEGIN: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.button)],
                self.BOOK_NAME: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.book_name)],
                self.SEARCH: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.search)]
            },

            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        self.dispatcher.add_handler(conv_handler)
        # –ª–æ–≥ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error)
        # self.dispatcher.add_handler(callbackqueryhandler.CallbackQueryHandler(self.button))
        self.updater.start_polling()

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    def begin(self, update, context):
        reply_keyboard = [['–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É üîç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç BestBookFinder! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É,"
                                  " –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É: ", reply_markup=markup)

        return self.BUTTON_BEGIN

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    def error(self, update, context):
        self.logger.warning('Update "%s" caused error "%s"', update, context.error)

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏
    def button(self, update, context):
        # –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –æ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —É–±–∏—Ä–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self.bot.send_message(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ", chat_id=update.message.chat.id,
                              reply_markup=ReplyKeyboardRemove())
        # –ø–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return self.BOOK_NAME

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞
    def book_name(self, update, context):

        book_name = update.message.text
        print(f'–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é {book_name}')

        self.bot.send_message(text="–ò—â—É –∫–Ω–∏–≥—É", chat_id=update.message.chat.id)
        self.bot.send_message(text="üîç", chat_id=update.message.chat.id)
        # –∫–∏–¥–∞—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ª–∞–±–∏—Ä–∏–Ω—Ç —Å–ª–æ–≤–∞—Ä—å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º - —Å–º–∞—è –¥–µ—à–µ–≤–∞—è –∫–Ω–∏–≥–∞ –∏ –µ–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        # –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∞–º—ã–µ –¥–µ—à–µ–≤–∞–µ –∫–Ω–∏–≥–∏ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        bookvoed = bk.main(book_name)
        chitaina = cht.main(book_name)
        combook = cmbk.main(book_name)
        fitabooks = fitb.main(book_name)
        fkniga = fkng.main(book_name)
        labirint = lbrn.main(book_name)
        mir_shkolnika = mrshk.main(book_name)
        polka23 = pl23.main(book_name)
        arr = [
            bookvoed, chitaina, combook, fitabooks, fkniga, labirint, mir_shkolnika, polka23
        ]

        cheap_book = {}
        cheap_book['price'] = 999999

        for i in arr:
            print(i)
            try:
                if (i['price'] is not None and i['price'] < cheap_book['price']):
                    cheap_book = i
                else:
                    continue
            except:
                pass

        print(cheap_book)
        # –ø—Ä–∏–¥—É–º–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –≥–¥–µ —Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω
        # –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        # –≥–¥–µ —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ —Ç–∞–º –∏ –≤—ã–±–∏—Ä–∞–µ–º
        # try:
        #     if labirint['price'] < chitai_gorod['price']:
        #         decision = labirint
        #         print(f"–¶–µ–Ω–∞ –Ω–∞ –õ–∞–±–∏—Ä–∏–Ω—Ç {labirint['price']} < —Ü–µ–Ω–∞ –Ω–∞ –ß–∏—Ç–∞–π –ì–æ—Ä–æ–¥ {chitai_gorod['price']}")
        #
        #     else:
        #         decision = chitai_gorod
        #         print(f"–¶–µ–Ω–∞ –Ω–∞ –õ–∞–±–∏—Ä–∏–Ω—Ç {labirint['price']} > —Ü–µ–Ω–∞ –Ω–∞ –ß–∏—Ç–∞–π –ì–æ—Ä–æ–¥ {chitai_gorod['price']}")
        # except:
        #     decision = self.findNone(chitai_gorod,labirint)[1]
        #     print(decision)
        #
        # # –µ—Å–ª–∏ –Ω–∞—à–ª–æ –∫–Ω–∏–≥—É
        # if decision is not None:
        #     # update.message.reply_text(labirint['name'])
        #     self.bot.send_photo(photo=decision['image'],
        #                         caption=f"{decision['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({decision['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {decision['price']}‚ÇΩ",
        #                         chat_id=update.message.chat.id, parse_mode='Markdown')
        # # –∏–Ω–∞—á–µ
        # else:
        #     self.bot.send_message(text="–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò•", chat_id=update.message.chat.id)
        #
        # # –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–¥–ø–∏—Å—å—é "–Ω–∞–π—Ç–∏ —Å–Ω–æ–≤–∞"
        # # –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å reply markup
        # self.bot.send_message(text="üîç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–∏–∂–µ: ",
        #                       chat_id=update.message.chat.id)

    def search(self, update, context):
        pass

    def findNone(self,arg1,arg2):
        # –µ—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        if (bool(arg1) and bool(arg2) == True):
            return False
        # –∏–Ω–∞—á–µ –µ—Å—Ç—å –∫–∞–∫–æ–µ —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ false
        else:
            # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π
            if bool(arg1) == False:
                return True, arg2
            #
            elif bool(arg2) == False:
                return True, arg1
            else:
                return True

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã
    def cancel(self, update, context):
        user = update.message.from_user
        self.logger.info("User %s canceled the conversation.", user.first_name)
        update.message.reply_text('Bye! Hope to see you again next time.')

        return ConversationHandler.END
