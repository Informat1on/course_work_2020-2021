# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å api Telegram
import telegram
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ª–æ–≥–æ–≤
import logging
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
from telegram import ReplyKeyboardRemove, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, callbackqueryhandler)
import time
from modules import bookvoed as bk, chitaina as cht, combook as cmbk, fitabooks as fitb, fkniga as fkng, \
    labirint as lbrn, polka23 as pl23, mir_shkolnika as mrshk


class FindBookBot:
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, bot_token):
        self.bot = telegram.Bot(token=bot_token)  # —Å–æ–∑–¥–∞—é –±–æ—Ç–∞
        self.updater = Updater(token=bot_token)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–ø–¥–µ–π—Ç–µ—Ä
        self.dispatcher = self.updater.dispatcher  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–ø–∞—Ç—á–µ—Ä
        self.cheap_arr = []  # –º–∞—Å—Å–∏–≤ –¥–µ—à–µ–≤—ã—Ö –∫–Ω–∏–≥ —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        self.all_arr = [] # –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        self.cheap_row_choice = 0 # id –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–≤–µ–¥–µ–Ω–Ω–æ–π –¥–µ—à–µ–≤–æ–π –∫–Ω–∏–≥–∏. –ù—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        self.all_row_choice = 0 # id –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–≤–µ–¥–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞. –ù—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

        # –æ–±—å—è–ª—è—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.BUTTON_BEGIN, self.BOOK_NAME, self.SEARCH, self.END = range(4)

        # –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                            level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    # —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    def start(self):
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                            level=logging.INFO)
        print(self.bot.get_me())  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.begin)],

            states={
                self.BUTTON_BEGIN: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.button)],
                self.BOOK_NAME: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.book_name)],
                self.SEARCH: [CommandHandler('start', self.begin), MessageHandler(Filters.text, self.search)]
            },

            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        self.dispatcher.add_handler(conv_handler)
        # –ª–æ–≥ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error)
        # query handler
        self.dispatcher.add_handler(callbackqueryhandler.CallbackQueryHandler(self.callback_butt))
        self.updater.start_polling()

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    def begin(self, update, context):
        reply_keyboard = [['–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É üîç']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç BestBookFinder! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É,"
                                  " –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É: ", reply_markup=markup)

        return self.BUTTON_BEGIN

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    def error(self, update, context):
        self.logger.warning('Update "%s" caused error "%s"', update, context.error)

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏
    def button(self, update, context):
        # –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –æ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —É–±–∏—Ä–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self.bot.send_message(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ", chat_id=update.message.chat.id,
                              reply_markup=ReplyKeyboardRemove())
        # –ø–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return self.BOOK_NAME

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞
    def book_name(self, update, context):

        book_name = update.message.text
        print(f'–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é {book_name}')

        self.bot.send_message(text="–ò—â—É –∫–Ω–∏–≥—É üîç", chat_id=update.message.chat.id)

        # –∫–∏–¥–∞—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ª–∞–±–∏—Ä–∏–Ω—Ç —Å–ª–æ–≤–∞—Ä—å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º - —Å–º–∞—è –¥–µ—à–µ–≤–∞—è –∫–Ω–∏–≥–∞ –∏ –µ–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        # –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∞–º—ã–µ –¥–µ—à–µ–≤–∞–µ –∫–Ω–∏–≥–∏ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        bookvoed = bk.main(book_name)
        chitaina = cht.main(book_name)
        combook = cmbk.main(book_name)
        fitabooks = fitb.main(book_name)
        fkniga = fkng.main(book_name)
        labirint = lbrn.main(book_name)
        mir_shkolnika = mrshk.main(book_name)
        polka23 = pl23.main(book_name)
        self.cheap_arr = [
            bookvoed[0], chitaina[0], combook[0], fitabooks[0], fkniga[0], labirint[0], mir_shkolnika[0], polka23[0]
        ]

        all_trash = [
            bookvoed[1], chitaina[1], combook[1], fitabooks[1], fkniga[1], labirint[1], mir_shkolnika[1], polka23[1]
        ]

        for module in all_trash:
            for item in module:
                try:
                    if item['price'] is not None and item['name'] is not None and item['link'] is not None:
                        self.all_arr.append(item)
                except:
                    pass

        cheap_book = {}
        cheap_book['price'] = 999999

        for i in self.cheap_arr:
            # print(i)
            try:
                if i['price'] is not None and i['price'] < cheap_book['price']:
                    cheap_book = i
                else:
                    continue
            except:
                pass

        # –µ—Å–ª–∏ –Ω–∞—à–ª–æ —Ö–æ—Ç—å 1 –∫–Ω–∏–≥—É
        if cheap_book['price'] < 999999:
            self.cheap_row_choice = self.cheap_arr.index(cheap_book)
            self.all_row_choice = None
            print(cheap_book)
            wrong_button = InlineKeyboardButton(text='–ù–µ —Ç–∞ –∫–Ω–∏–≥–∞ ? :c', callback_data='wrong')
            # self.bot.send_photo(photo=cheap_book['image'],chat_id=update.message.chat.id)
            self.bot.send_message(
                # photo=cheap_book['image'],
                text=f"{cheap_book['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({cheap_book['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {cheap_book['price']}‚ÇΩ",
                chat_id=update.message.chat.id, parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[wrong_button]]))
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ –Ω–∏ –æ–¥–Ω–æ–π
        else:
            self.bot.send_message(text=f"–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é '{book_name}' –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò•",
                                  chat_id=update.message.chat.id)

        # # –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–¥–ø–∏—Å—å—é "–Ω–∞–π—Ç–∏ —Å–Ω–æ–≤–∞"
        # # –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å reply markup
        self.bot.send_message(text="üîç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–∏–∂–µ: ",
                              chat_id=update.message.chat.id)

    def search(self, update, context):
        pass

    def callback_butt(self, update, context):
        query = update.callback_query

        # –µ—Å–ª–∏ –Ω–∞—à–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–∏–≥—É
        if query.data == 'wrong':
            reply_markup = []
            for i in range(len(self.cheap_arr)):
                if (self.cheap_arr[i].keys()):
                    # –¥–æ–±–∞–≤–ª—è—é –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –∏ —Ü–µ–Ω—É –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
                    try:
                        reply_markup.append(
                            [InlineKeyboardButton(text=f"{self.cheap_arr[i]['name']} - {self.cheap_arr[i]['price']}‚ÇΩ",
                                                  callback_data=f'cheap_item{i}')])
                    except:
                        pass
            # –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            # reply_markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô",callback_data='back')])
            reply_markup.append([
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='back'),
                InlineKeyboardButton(text="–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ üìñ", callback_data='page1')])

            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É", reply_markup=InlineKeyboardMarkup(reply_markup))

        # –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        if query.data == 'back':
            # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–∏–≥–æ–π
            wrong_button = InlineKeyboardButton(text='–ù–µ —Ç–∞ –∫–Ω–∏–≥–∞ ? :c', callback_data='wrong')

            if self.all_row_choice is not None:
                query.edit_message_text(
                    text=f"{self.all_arr[self.all_row_choice]['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({self.all_arr[self.all_row_choice]['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {self.all_arr[self.all_row_choice]['price']}‚ÇΩ",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[wrong_button]]))

            elif self.cheap_row_choice is not None:
                query.edit_message_text(
                    text=f"{self.cheap_arr[self.cheap_row_choice]['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({self.cheap_arr[self.cheap_row_choice]['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {self.cheap_arr[self.cheap_row_choice]['price']}‚ÇΩ",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[wrong_button]]))



        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏"
        if query.data == 'all_books':
            reply_markup = []
            # –ø–æ 7 –∫–Ω–∏–≥ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
            for i in range(20):
                reply_markup.append(
                    [InlineKeyboardButton(text=f"{i}name - {i * 15}‚ÇΩ",
                                          callback_data=f'page{i}')])
            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É", reply_markup=InlineKeyboardMarkup(reply_markup))

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        if query.data.startswith('page'):
            page_number = int(query.data.split('e')[1])  #–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_books = len(self.all_arr)  #–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥

            # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            if total_books % 7 == 0:
                total_pages = total_books // 7
            elif total_books < 7:
                total_pages = 1
            else:
                total_pages = total_books // 7 + 1

            # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
            if page_number > total_pages or page_number < 1:
                return

            # —Å—Ç—Ä–µ–ª–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            pages = [
                InlineKeyboardButton(text="<<",callback_data=f"page{1}"),
                InlineKeyboardButton(text="<", callback_data=f"page{page_number-1}"),
                InlineKeyboardButton(text="üè†", callback_data="wrong"),
                InlineKeyboardButton(text=">", callback_data=f"page{page_number+1}"),
                InlineKeyboardButton(text=">>", callback_data=f"page{total_pages}")
            ]
            # –∏—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            reply_markup = []

            # –ø–æ 7 –∫–Ω–∏–≥ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
            # –≤—ã–≤–æ–∂—É 7 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

            # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if page_number == total_pages:
                for i in range((page_number - 1) * 7, total_books):
                    reply_markup.append(
                        [InlineKeyboardButton(text=f"{self.all_arr[i]['name']} - {self.all_arr[i]['price']}‚ÇΩ",
                                              callback_data=f"all_item{i}")])

            # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            else:
                for i in range((page_number-1)*7, page_number*7):
                    reply_markup.append(
                        [InlineKeyboardButton(text=f"{self.all_arr[i]['name']} - {self.all_arr[i]['price']}‚ÇΩ",
                                              callback_data=f"all_item{i}")])

            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –¥–æ–±–∞–≤–ª—è—é —Å–Ω–∏–∑—É —Å—Ç—Ä–µ–ª–∫–∏
            reply_markup.append(pages)
            query.edit_message_text(text=f"–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}", reply_markup=InlineKeyboardMarkup(reply_markup))

        # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –≤—Å–µ—Ö –∫–Ω–∏–≥
        if query.data.startswith('all_item'):
            all_book_id = int(query.data.split('m')[1])  #–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            # –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã–±—Ä–∞–ª–∏
            self.all_row_choice = int(query.data.split('m')[1])
            self.cheap_row_choice = None
            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–∏–≥–æ–π
            wrong_button = InlineKeyboardButton(text='–ù–µ —Ç–∞ –∫–Ω–∏–≥–∞ ? :c', callback_data='wrong')
            query.edit_message_text(
                text=f"{self.all_arr[all_book_id]['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({self.all_arr[all_book_id]['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {self.all_arr[all_book_id]['price']}‚ÇΩ",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[wrong_button]]))

        # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –∫–Ω–∏–≥
        if query.data.startswith('cheap_item'):
            # –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã–±—Ä–∞–ª–∏
            self.cheap_row_choice = int(query.data.split('m')[1])
            self.all_row_choice = None
            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–∏–≥–æ–π
            wrong_button = InlineKeyboardButton(text='–ù–µ —Ç–∞ –∫–Ω–∏–≥–∞ ? :c', callback_data='wrong')
            query.edit_message_text(
                text=f"{self.cheap_arr[self.cheap_row_choice]['name']}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É]({self.cheap_arr[self.cheap_row_choice]['link']})\n–¶–µ–Ω–∞ –∫–Ω–∏–≥–∏: {self.cheap_arr[self.cheap_row_choice]['price']}‚ÇΩ",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[wrong_button]]))

        else:
            pass

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã
    def cancel(self, update, context):
        user = update.message.from_user
        self.logger.info("User %s canceled the conversation.", user.first_name)
        update.message.reply_text('Bye! Hope to see you again next time.')

        return ConversationHandler.END
